0001_00_01000_00000
0000000000000110 // load r8, #6 // r8 = n
0001_00_00100_00000
0000000001000000 // load r4, #64 // r4 = arr
0001_00_01001_00000
0000000000000001 // load r9, #1 // r9 = 1
0100_00_01000_01001
01010_0000000_0010 // sub r8, r9, r10 // r10 = n - 1
0001_00_00010_00000
0000000000000000 // load r2, #0 // r2 = i
0101_00_00010_01010
0000000000000000 // cmp r2, r10
1001_110_000000000
0000000000100000 // bge +32
0001_00_00011_00000
0000000000000000 // load r3, #0 // r3 = j
0100_00_01010_00010
00111_0000000_0010 // sub r10, r2, r7 // r7 = n - i - 1
0101_00_00011_00111
0000000000000000 // cmp r3, r7
1001_110_000000000
0000000000010100 // bge +20
0100_00_00011_00100
01011_0000000_0001 // add r3, r4, r11 // r11 = arr + j
0100_00_01011_01001
01100_0000000_0001 // add r11, r9, r12 // r12 = arr + j + 1
0001_10_00101_01011
0000000000000000 // load r5, (r11) // r5 = arr[j]
0001_10_00110_01100
0000000000000000 // load r6, (r12) // r6 = arr[j+1]
0101_00_00101_00110
0000000000000000 // cmp r5, r6
1001_100_000000000
0000000000000100 // ble +4
0010_10_00110_01011
0000000000000000 // store r6, (r11)
0010_10_00101_01100
0000000000000000 // store r5, (r12)
0100_00_00011_01001
00011_0000000_0001 // add r3, r9, r3 // j++
1001_000_000000000
1111111111101000 // brn -24
0100_00_00010_01001
00010_0000000_0001 // add r2, r9, r2 // i++
1001_000_000000000
1111111111011100 // brn -36
0001_00_00010_00000
0000000000000000 // load r2, #0
0101_00_00010_01000
0000000000000000 // cmp r2, r8
0110_110_000000000
0000000000000000 // jge 0
0100_00_00100_00010
01011_0000000_0001 // add r4, r2, r11
0001_10_00101_01011
0000000000000000 // load r5, (r11)
0010_01_00101_00000
1111111111111111 // store r5, 0xffff
0100_00_00010_01001
00010_0000000_0001 // add r2, r9, r2
1001_000_000000000
1111111111110010 //brn -14
0000000000000000
0000000000000000
0000000000001001 // 9
0000000000000011 // 3
0000000000000100 // 4
0000000000000010 // 2
0000000000000110 // 6
0000000000000001 // 1