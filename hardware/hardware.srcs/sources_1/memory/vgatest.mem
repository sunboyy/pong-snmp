0001_00_10000_00000
0000000101000000	// load r16 #320 // main
0001_00_10001_00000
0000000011110000	// load r17 #240
0001_00_10010_00000
0000000000000001	// load r18 #1
0001_00_00111_00000
0000000000000001	// load r7 #1 // color
0001_00_00101_00000
0000000000000000	// load r5 #0 // x
0101_00_00101_10000
0000000000000000	// cmp r5 r16
1001_110_000000000
0000000000010110	// bge +22
0001_00_00110_00000
0000000000000000	// load r6 #0 // y
0101_00_00110_10001
0000000000000000	// cmp r6 r17
1001_110_000000000
0000000000001100	// bge +12
0011_00_00010_00101
0000000000000000	// mov r2 r5
0011_00_00011_00110
0000000000000000	// mov r3 r6
0011_00_00100_00111
0000000000000000	// mov r4 r7
0111_000000000000
0000000000101000	// call 40
0100_00_10010_00110
00110_0000000_0001	// add r6 r18 r6
1001_000_000000000
1111111111110000	// brn -16
0100_00_10010_00101
00101_0000000_0001	// add r5 r18 r5
1001_000_000000000
1111111111100110	// brn -26
0100_00_10010_00111
00111_0000000_0010	// sub r7 r18 r7
0110_000_000000000
0000000000001000	// jmp 8
1010_00_00101_00000
0000000000000000	// push r5 // draw
1010_00_10000_00000
0000000000000000	// push r16
0001_00_10000_00000
0000000000010100	// load r16 #20
0100_00_00011_10000
00011_0000000_0011	// mul r3 r3 r16
0001_00_10000_00000
0000000000010000	// load r16 #16
0100_00_00010_10000
00101_0000000_0100	// div r5 r2 r16
0100_00_00011_00101
00011_0000000_0001	// add r3 r3 r5 // loc
0100_00_00010_10000
00010_0000000_0101	// mod r2 r2 r16
0001_00_10000_00000
1110000000000000	// load r16 #0xe000
0100_00_10000_00011
00011_0000000_0001	// add r3 r16 r3 // addr
0001_00_10000_00000
0000000000001111	// load r16 #15
0100_00_10000_00010
00101_0000000_0010	// sub r5 r16 r2 // idx
0001_00_10000_00000
0000000000000001	// load r16 #1
0100_00_10000_00101
00101_0000000_1011	// shl r5 r16 r5 // 1 << idx
0001_00_10000_00000
0000000000000000	// load r16 #0
0001_10_00010_00011
0000000000000000	// load r2 (r3) // current
0101_00_00100_10000
0000000000000000	// cmp r4 r16
1001_010_000000000
0000000000000110	// bne +6
0100_00_00101_00000
00101_0000000_1001	// not r5 r5
0100_00_00010_00101
00101_0000000_0110	// and r5 r2 r5 // current & ~(1 << idx)
1001_000_000000000
0000000000000010	// brn +2
0100_00_00010_00101
00101_0000000_0111	// or r5 r2 r5 // current | (1 << idx)
0010_10_00101_00011
0000000000000000	// store r5 (r3)
1011_00_10000_00000
0000000000000000	// pop r16
1011_00_00101_00000
0000000000000000	// pop r5
1000_000000000000
0000000000000000	// ret
